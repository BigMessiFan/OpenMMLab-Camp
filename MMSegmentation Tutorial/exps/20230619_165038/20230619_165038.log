2023/06/19 16:50:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Mar 13 2023, 10:26:41) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 2023
    GPU 0: S2.gpu.large
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.3, V11.3.109
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.12.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1+cu113
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2023
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/19 16:50:39 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
batch_size = 8
num_classes = 6
work_dir = 'exps'
dataset_type = 'WatermelonDataset'
data_root = 'data/Watermelon87_Semantic_Seg_Mask/'
crop_size = (512, 1024)
load_from = 'checkpoint/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume = False
seed_num = 2023
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
max_iters = 400
logger_interval = 20
val_interval = 10
checkpoint_interval = 10
save_best = 'mIoU'
save_last = False
max_keep_ckpts = 4
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 1024)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='WatermelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WatermelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WatermelonDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=400,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=400, val_interval=10)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=20, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook',
        by_epoch=False,
        interval=10,
        save_best='mIoU',
        save_last=False,
        max_keep_ckpts=4),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
randomness = dict(seed=2023)

2023/06/19 16:50:54 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/19 16:50:54 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/19 16:50:55 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/19 16:50:56 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/19 16:50:56 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/19 16:50:56 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([6, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/19 16:50:57 - mmengine - INFO - Load checkpoint from checkpoint/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
2023/06/19 16:50:57 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/19 16:50:57 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/19 16:50:57 - mmengine - INFO - Checkpoints will be saved to /gemini/code/MMSegmentation Tutorial/exps.
2023/06/19 16:51:34 - mmengine - INFO - Exp name: custom_config_pspnet_r50_20230619_165038
2023/06/19 16:51:34 - mmengine - INFO - Iter(train) [  6/400]  lr: 9.8883e-03  eta: 0:40:51  time: 6.2224  data_time: 0.0330  memory: 20073  loss: 2.2077  decode.loss_ce: 1.5466  decode.acc_seg: 68.9963  aux.loss_ce: 0.6611  aux.acc_seg: 61.5775
2023/06/19 16:51:39 - mmengine - INFO - Saving checkpoint at 10 iterations
2023/06/19 16:51:49 - mmengine - INFO - per class results:
2023/06/19 16:51:49 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background |  79.2 | 83.67 |
|    red     | 56.08 | 99.86 |
|   green    |  0.0  |  0.0  |
|   white    |  0.0  |  0.0  |
| seed-black |  0.0  |  0.0  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:51:49 - mmengine - INFO - Iter(val) [11/11]    aAcc: 75.9000  mIoU: 22.5500  mAcc: 30.5900  data_time: 0.0930  time: 0.7106
2023/06/19 16:51:51 - mmengine - INFO - The best checkpoint with 22.5500 mIoU at 10 iter is saved to best_mIoU_iter_10.pth.
2023/06/19 16:52:05 - mmengine - INFO - Iter(train) [ 20/400]  lr: 9.5747e-03  eta: 0:18:24  time: 1.5907  data_time: 0.3965  memory: 19995  loss: 0.9998  decode.loss_ce: 0.6363  decode.acc_seg: 82.3468  aux.loss_ce: 0.3635  aux.acc_seg: 81.3933
2023/06/19 16:52:05 - mmengine - INFO - Saving checkpoint at 20 iterations
2023/06/19 16:52:08 - mmengine - INFO - per class results:
2023/06/19 16:52:08 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 78.72 | 94.32 |
|    red     | 80.55 | 99.44 |
|   green    |  0.0  |  0.0  |
|   white    |  0.16 |  0.16 |
| seed-black |  0.0  |  0.0  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:52:08 - mmengine - INFO - Iter(val) [11/11]    aAcc: 82.0800  mIoU: 26.5700  mAcc: 32.3200  data_time: 0.0073  time: 0.0955
2023/06/19 16:52:08 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_10.pth is removed
2023/06/19 16:52:10 - mmengine - INFO - The best checkpoint with 26.5700 mIoU at 20 iter is saved to best_mIoU_iter_20.pth.
2023/06/19 16:52:25 - mmengine - INFO - Saving checkpoint at 30 iterations
2023/06/19 16:52:28 - mmengine - INFO - per class results:
2023/06/19 16:52:28 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 75.61 | 82.02 |
|    red     | 83.27 | 95.05 |
|   green    |  0.0  |  0.0  |
|   white    | 27.83 | 77.87 |
| seed-black |  0.0  |  0.0  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:52:28 - mmengine - INFO - Iter(val) [11/11]    aAcc: 78.9700  mIoU: 31.1200  mAcc: 42.4900  data_time: 0.0071  time: 0.0951
2023/06/19 16:52:28 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_20.pth is removed
2023/06/19 16:52:30 - mmengine - INFO - The best checkpoint with 31.1200 mIoU at 30 iter is saved to best_mIoU_iter_30.pth.
2023/06/19 16:52:44 - mmengine - INFO - Iter(train) [ 40/400]  lr: 9.1247e-03  eta: 0:13:35  time: 1.6072  data_time: 0.4153  memory: 19996  loss: 0.5949  decode.loss_ce: 0.3862  decode.acc_seg: 86.2834  aux.loss_ce: 0.2087  aux.acc_seg: 78.3450
2023/06/19 16:52:44 - mmengine - INFO - Saving checkpoint at 40 iterations
2023/06/19 16:52:48 - mmengine - INFO - per class results:
2023/06/19 16:52:48 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 81.91 | 97.51 |
|    red     | 82.79 | 87.78 |
|   green    |  0.0  |  0.0  |
|   white    | 53.59 | 67.19 |
| seed-black |  0.0  |  0.0  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:52:48 - mmengine - INFO - Iter(val) [11/11]    aAcc: 85.4300  mIoU: 36.3800  mAcc: 42.0800  data_time: 0.0073  time: 0.0956
2023/06/19 16:52:48 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_30.pth is removed
2023/06/19 16:52:50 - mmengine - INFO - The best checkpoint with 36.3800 mIoU at 40 iter is saved to best_mIoU_iter_40.pth.
2023/06/19 16:53:04 - mmengine - INFO - Saving checkpoint at 50 iterations
2023/06/19 16:53:07 - mmengine - INFO - per class results:
2023/06/19 16:53:07 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 80.98 | 90.07 |
|    red     | 86.95 | 94.26 |
|   green    |  6.5  |  9.83 |
|   white    | 50.44 |  76.7 |
| seed-black |  0.0  |  0.0  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:53:07 - mmengine - INFO - Iter(val) [11/11]    aAcc: 84.0900  mIoU: 37.4800  mAcc: 45.1400  data_time: 0.0084  time: 0.0998
2023/06/19 16:53:08 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_40.pth is removed
2023/06/19 16:53:09 - mmengine - INFO - The best checkpoint with 37.4800 mIoU at 50 iter is saved to best_mIoU_iter_50.pth.
2023/06/19 16:53:24 - mmengine - INFO - Iter(train) [ 60/400]  lr: 8.6722e-03  eta: 0:11:38  time: 1.6521  data_time: 0.4526  memory: 19995  loss: 0.6388  decode.loss_ce: 0.4251  decode.acc_seg: 81.0155  aux.loss_ce: 0.2137  aux.acc_seg: 83.0617
2023/06/19 16:53:24 - mmengine - INFO - Saving checkpoint at 60 iterations
2023/06/19 16:53:28 - mmengine - INFO - per class results:
2023/06/19 16:53:28 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 85.16 | 97.06 |
|    red     | 88.63 | 98.77 |
|   green    |  1.19 |  1.33 |
|   white    | 43.46 | 49.54 |
| seed-black |  0.0  |  0.0  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:53:28 - mmengine - INFO - Iter(val) [11/11]    aAcc: 86.9800  mIoU: 36.4100  mAcc: 41.1200  data_time: 0.0075  time: 0.0967
2023/06/19 16:53:40 - mmengine - INFO - Saving checkpoint at 70 iterations
2023/06/19 16:53:43 - mmengine - INFO - per class results:
2023/06/19 16:53:43 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 80.91 | 84.43 |
|    red     | 87.12 | 97.32 |
|   green    | 21.12 | 35.98 |
|   white    | 40.18 | 76.39 |
| seed-black |  0.0  |  0.0  |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:53:43 - mmengine - INFO - Iter(val) [11/11]    aAcc: 83.3500  mIoU: 38.2200  mAcc: 49.0200  data_time: 0.0081  time: 0.0974
2023/06/19 16:53:43 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_50.pth is removed
2023/06/19 16:53:45 - mmengine - INFO - The best checkpoint with 38.2200 mIoU at 70 iter is saved to best_mIoU_iter_70.pth.
2023/06/19 16:53:59 - mmengine - INFO - Iter(train) [ 80/400]  lr: 8.2170e-03  eta: 0:10:07  time: 1.6292  data_time: 0.4261  memory: 19995  loss: 0.5711  decode.loss_ce: 0.3810  decode.acc_seg: 85.6245  aux.loss_ce: 0.1901  aux.acc_seg: 86.8840
2023/06/19 16:53:59 - mmengine - INFO - Saving checkpoint at 80 iterations
2023/06/19 16:54:03 - mmengine - INFO - per class results:
2023/06/19 16:54:03 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 79.06 |  86.5 |
|    red     | 83.81 | 98.16 |
|   green    |  0.09 |  0.09 |
|   white    | 46.52 | 90.39 |
| seed-black |  25.8 | 26.39 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:54:03 - mmengine - INFO - Iter(val) [11/11]    aAcc: 83.4500  mIoU: 39.2100  mAcc: 50.2600  data_time: 0.0089  time: 0.0983
2023/06/19 16:54:03 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_70.pth is removed
2023/06/19 16:54:05 - mmengine - INFO - The best checkpoint with 39.2100 mIoU at 80 iter is saved to best_mIoU_iter_80.pth.
2023/06/19 16:54:20 - mmengine - INFO - Saving checkpoint at 90 iterations
2023/06/19 16:54:26 - mmengine - INFO - per class results:
2023/06/19 16:54:26 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 87.11 | 95.99 |
|    red     | 87.33 | 99.36 |
|   green    |  9.59 |  9.65 |
|   white    | 68.85 | 78.03 |
| seed-black | 49.45 | 53.44 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:54:26 - mmengine - INFO - Iter(val) [11/11]    aAcc: 89.3300  mIoU: 50.3900  mAcc: 56.0800  data_time: 0.0074  time: 0.0955
2023/06/19 16:54:26 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_80.pth is removed
2023/06/19 16:54:27 - mmengine - INFO - The best checkpoint with 50.3900 mIoU at 90 iter is saved to best_mIoU_iter_90.pth.
2023/06/19 16:54:42 - mmengine - INFO - Iter(train) [100/400]  lr: 7.7589e-03  eta: 0:09:18  time: 1.6544  data_time: 0.4566  memory: 19994  loss: 0.5090  decode.loss_ce: 0.3374  decode.acc_seg: 91.5335  aux.loss_ce: 0.1716  aux.acc_seg: 88.3797
2023/06/19 16:54:42 - mmengine - INFO - Saving checkpoint at 100 iterations
2023/06/19 16:54:45 - mmengine - INFO - per class results:
2023/06/19 16:54:45 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 87.21 | 89.31 |
|    red     | 83.42 | 99.18 |
|   green    | 59.82 | 82.42 |
|   white    | 70.69 | 77.35 |
| seed-black | 48.21 | 52.72 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:54:45 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.2700  mIoU: 58.2300  mAcc: 66.8300  data_time: 0.0079  time: 0.0972
2023/06/19 16:54:46 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_90.pth is removed
2023/06/19 16:54:47 - mmengine - INFO - The best checkpoint with 58.2300 mIoU at 100 iter is saved to best_mIoU_iter_100.pth.
2023/06/19 16:55:03 - mmengine - INFO - Saving checkpoint at 110 iterations
2023/06/19 16:55:06 - mmengine - INFO - per class results:
2023/06/19 16:55:06 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 87.89 | 93.18 |
|    red     | 86.98 | 99.18 |
|   green    | 41.01 | 50.96 |
|   white    |  70.0 | 75.85 |
| seed-black | 58.54 |  68.7 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:55:06 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.3900  mIoU: 57.4000  mAcc: 64.6400  data_time: 0.0070  time: 0.0955
2023/06/19 16:55:19 - mmengine - INFO - Iter(train) [120/400]  lr: 7.2978e-03  eta: 0:08:23  time: 1.2452  data_time: 0.0441  memory: 19995  loss: 0.4345  decode.loss_ce: 0.2819  decode.acc_seg: 88.3499  aux.loss_ce: 0.1526  aux.acc_seg: 82.4784
2023/06/19 16:55:19 - mmengine - INFO - Saving checkpoint at 120 iterations
2023/06/19 16:55:22 - mmengine - INFO - per class results:
2023/06/19 16:55:22 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 79.07 | 80.64 |
|    red     | 85.79 | 99.24 |
|   green    | 44.01 | 82.77 |
|   white    | 51.47 |  76.6 |
| seed-black | 60.33 | 66.86 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:55:22 - mmengine - INFO - Iter(val) [11/11]    aAcc: 85.2300  mIoU: 53.4500  mAcc: 67.6900  data_time: 0.0084  time: 0.0969
2023/06/19 16:55:35 - mmengine - INFO - Saving checkpoint at 130 iterations
2023/06/19 16:55:38 - mmengine - INFO - per class results:
2023/06/19 16:55:38 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 90.34 | 94.42 |
|    red     | 88.44 | 98.35 |
|   green    | 61.85 | 67.94 |
|   white    | 68.32 | 80.79 |
| seed-black | 57.73 |  64.4 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:55:38 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.3700  mIoU: 61.1100  mAcc: 67.6500  data_time: 0.0091  time: 0.0996
2023/06/19 16:55:38 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_100.pth is removed
2023/06/19 16:55:39 - mmengine - INFO - The best checkpoint with 61.1100 mIoU at 130 iter is saved to best_mIoU_iter_130.pth.
2023/06/19 16:55:54 - mmengine - INFO - Iter(train) [140/400]  lr: 6.8334e-03  eta: 0:07:34  time: 1.6586  data_time: 0.4618  memory: 19995  loss: 0.3020  decode.loss_ce: 0.1925  decode.acc_seg: 93.6566  aux.loss_ce: 0.1095  aux.acc_seg: 92.1226
2023/06/19 16:55:54 - mmengine - INFO - Saving checkpoint at 140 iterations
2023/06/19 16:55:58 - mmengine - INFO - per class results:
2023/06/19 16:55:58 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 87.77 | 95.53 |
|    red     | 87.15 | 99.54 |
|   green    | 26.65 | 27.07 |
|   white    | 71.37 | 77.27 |
| seed-black | 53.76 | 59.12 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:55:58 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.2700  mIoU: 54.4500  mAcc: 59.7500  data_time: 0.0074  time: 0.0971
2023/06/19 16:56:10 - mmengine - INFO - Saving checkpoint at 150 iterations
2023/06/19 16:56:14 - mmengine - INFO - per class results:
2023/06/19 16:56:14 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 90.09 | 93.51 |
|    red     | 84.66 | 99.14 |
|   green    | 66.22 | 70.14 |
|   white    | 75.31 |  80.5 |
| seed-black | 59.14 | 71.47 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:56:14 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.2200  mIoU: 62.5700  mAcc: 69.1300  data_time: 0.0082  time: 0.0983
2023/06/19 16:56:14 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_130.pth is removed
2023/06/19 16:56:16 - mmengine - INFO - The best checkpoint with 62.5700 mIoU at 150 iter is saved to best_mIoU_iter_150.pth.
2023/06/19 16:56:30 - mmengine - INFO - Iter(train) [160/400]  lr: 6.3654e-03  eta: 0:06:51  time: 1.6644  data_time: 0.4538  memory: 19995  loss: 0.3727  decode.loss_ce: 0.2366  decode.acc_seg: 94.5188  aux.loss_ce: 0.1361  aux.acc_seg: 91.5403
2023/06/19 16:56:30 - mmengine - INFO - Saving checkpoint at 160 iterations
2023/06/19 16:56:34 - mmengine - INFO - per class results:
2023/06/19 16:56:34 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 92.46 |  93.7 |
|    red     |  92.9 | 98.96 |
|   green    | 66.13 | 91.73 |
|   white    | 78.46 | 84.32 |
| seed-black | 51.18 | 74.79 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:56:34 - mmengine - INFO - Iter(val) [11/11]    aAcc: 94.0400  mIoU: 63.5200  mAcc: 73.9200  data_time: 0.0075  time: 0.0973
2023/06/19 16:56:34 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_150.pth is removed
2023/06/19 16:56:36 - mmengine - INFO - The best checkpoint with 63.5200 mIoU at 160 iter is saved to best_mIoU_iter_160.pth.
2023/06/19 16:56:50 - mmengine - INFO - Saving checkpoint at 170 iterations
2023/06/19 16:56:53 - mmengine - INFO - per class results:
2023/06/19 16:56:53 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 87.78 | 96.51 |
|    red     | 90.27 | 98.36 |
|   green    | 21.14 | 21.16 |
|   white    | 79.73 | 87.13 |
| seed-black | 59.34 | 78.98 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:56:53 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.9200  mIoU: 56.3800  mAcc: 63.6900  data_time: 0.0070  time: 0.0964
2023/06/19 16:57:06 - mmengine - INFO - Iter(train) [180/400]  lr: 5.8935e-03  eta: 0:06:09  time: 1.2427  data_time: 0.0396  memory: 19995  loss: 0.3492  decode.loss_ce: 0.2231  decode.acc_seg: 92.2228  aux.loss_ce: 0.1261  aux.acc_seg: 88.5588
2023/06/19 16:57:06 - mmengine - INFO - Saving checkpoint at 180 iterations
2023/06/19 16:57:09 - mmengine - INFO - per class results:
2023/06/19 16:57:09 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 85.08 | 87.52 |
|    red     | 81.24 |  99.3 |
|   green    | 51.62 | 75.82 |
|   white    | 71.16 | 74.88 |
| seed-black |  60.0 | 70.09 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:57:09 - mmengine - INFO - Iter(val) [11/11]    aAcc: 88.7300  mIoU: 58.1800  mAcc: 67.9300  data_time: 0.0080  time: 0.0988
2023/06/19 16:57:21 - mmengine - INFO - Saving checkpoint at 190 iterations
2023/06/19 16:57:25 - mmengine - INFO - per class results:
2023/06/19 16:57:25 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 90.35 | 92.51 |
|    red     | 89.35 | 99.06 |
|   green    | 76.62 | 81.52 |
|   white    | 63.07 | 85.54 |
| seed-black | 62.25 | 72.77 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:57:25 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.7400  mIoU: 63.6100  mAcc: 71.9000  data_time: 0.0083  time: 0.0982
2023/06/19 16:57:25 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_160.pth is removed
2023/06/19 16:57:27 - mmengine - INFO - The best checkpoint with 63.6100 mIoU at 190 iter is saved to best_mIoU_iter_190.pth.
2023/06/19 16:57:42 - mmengine - INFO - Iter(train) [200/400]  lr: 5.4172e-03  eta: 0:05:31  time: 1.6570  data_time: 0.4589  memory: 19995  loss: 0.2886  decode.loss_ce: 0.1849  decode.acc_seg: 91.5949  aux.loss_ce: 0.1037  aux.acc_seg: 92.5041
2023/06/19 16:57:42 - mmengine - INFO - Saving checkpoint at 200 iterations
2023/06/19 16:57:45 - mmengine - INFO - per class results:
2023/06/19 16:57:46 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 90.55 | 94.54 |
|    red     | 89.75 | 99.03 |
|   green    | 55.47 |  63.5 |
|   white    | 81.13 | 88.73 |
| seed-black | 57.43 | 70.31 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:57:46 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.9000  mIoU: 62.3900  mAcc: 69.3500  data_time: 0.0083  time: 0.0981
2023/06/19 16:57:58 - mmengine - INFO - Saving checkpoint at 210 iterations
2023/06/19 16:58:01 - mmengine - INFO - per class results:
2023/06/19 16:58:01 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 85.02 | 87.69 |
|    red     | 81.25 | 99.26 |
|   green    | 59.19 | 75.89 |
|   white    | 78.82 | 85.82 |
| seed-black | 63.46 | 75.69 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:58:01 - mmengine - INFO - Iter(val) [11/11]    aAcc: 89.6000  mIoU: 61.2900  mAcc: 70.7200  data_time: 0.0076  time: 0.0972
2023/06/19 16:58:14 - mmengine - INFO - Iter(train) [220/400]  lr: 4.9362e-03  eta: 0:04:51  time: 1.2516  data_time: 0.0422  memory: 19996  loss: 0.3680  decode.loss_ce: 0.2353  decode.acc_seg: 87.3696  aux.loss_ce: 0.1326  aux.acc_seg: 81.0377
2023/06/19 16:58:14 - mmengine - INFO - Saving checkpoint at 220 iterations
2023/06/19 16:58:17 - mmengine - INFO - per class results:
2023/06/19 16:58:17 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 86.98 | 87.85 |
|    red     | 82.51 |  99.3 |
|   green    | 65.26 | 92.28 |
|   white    | 76.14 | 81.62 |
| seed-black | 58.63 | 73.68 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:58:17 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.5300  mIoU: 61.5900  mAcc: 72.4500  data_time: 0.0074  time: 0.0963
2023/06/19 16:58:30 - mmengine - INFO - Saving checkpoint at 230 iterations
2023/06/19 16:58:34 - mmengine - INFO - per class results:
2023/06/19 16:58:34 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 91.02 | 93.09 |
|    red     |  84.5 |  99.0 |
|   green    | 76.76 | 81.78 |
|   white    | 76.41 | 82.29 |
| seed-black |  56.1 | 77.83 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:58:34 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.8900  mIoU: 64.1300  mAcc: 72.3300  data_time: 0.0075  time: 0.0980
2023/06/19 16:58:34 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_190.pth is removed
2023/06/19 16:58:36 - mmengine - INFO - The best checkpoint with 64.1300 mIoU at 230 iter is saved to best_mIoU_iter_230.pth.
2023/06/19 16:58:51 - mmengine - INFO - Iter(train) [240/400]  lr: 4.4498e-03  eta: 0:04:17  time: 1.7212  data_time: 0.5228  memory: 19994  loss: 0.2808  decode.loss_ce: 0.1831  decode.acc_seg: 95.3481  aux.loss_ce: 0.0976  aux.acc_seg: 92.2364
2023/06/19 16:58:51 - mmengine - INFO - Saving checkpoint at 240 iterations
2023/06/19 16:58:54 - mmengine - INFO - per class results:
2023/06/19 16:58:54 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 92.39 | 94.28 |
|    red     | 86.69 | 98.78 |
|   green    |  79.9 | 84.23 |
|   white    | 75.08 | 82.63 |
| seed-black | 56.37 | 82.45 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:58:54 - mmengine - INFO - Iter(val) [11/11]    aAcc: 93.7500  mIoU: 65.0700  mAcc: 73.7300  data_time: 0.0086  time: 0.0988
2023/06/19 16:58:54 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_230.pth is removed
2023/06/19 16:58:56 - mmengine - INFO - The best checkpoint with 65.0700 mIoU at 240 iter is saved to best_mIoU_iter_240.pth.
2023/06/19 16:59:11 - mmengine - INFO - Saving checkpoint at 250 iterations
2023/06/19 16:59:15 - mmengine - INFO - per class results:
2023/06/19 16:59:15 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 92.85 | 94.03 |
|    red     | 89.11 | 98.44 |
|   green    | 77.19 | 92.44 |
|   white    | 79.45 | 86.62 |
| seed-black | 65.79 | 82.73 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:59:15 - mmengine - INFO - Iter(val) [11/11]    aAcc: 94.3500  mIoU: 67.4000  mAcc: 75.7100  data_time: 0.0086  time: 0.0993
2023/06/19 16:59:15 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_240.pth is removed
2023/06/19 16:59:16 - mmengine - INFO - The best checkpoint with 67.4000 mIoU at 250 iter is saved to best_mIoU_iter_250.pth.
2023/06/19 16:59:32 - mmengine - INFO - Iter(train) [260/400]  lr: 3.9572e-03  eta: 0:03:46  time: 1.7326  data_time: 0.5233  memory: 19996  loss: 0.2771  decode.loss_ce: 0.1778  decode.acc_seg: 95.2126  aux.loss_ce: 0.0993  aux.acc_seg: 94.5826
2023/06/19 16:59:32 - mmengine - INFO - Saving checkpoint at 260 iterations
2023/06/19 16:59:36 - mmengine - INFO - per class results:
2023/06/19 16:59:36 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 94.07 |  96.4 |
|    red     | 89.29 |  99.1 |
|   green    | 80.76 | 81.79 |
|   white    | 79.26 | 84.69 |
| seed-black | 61.88 | 70.61 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:59:36 - mmengine - INFO - Iter(val) [11/11]    aAcc: 94.9900  mIoU: 67.5500  mAcc: 72.1000  data_time: 0.0084  time: 0.0991
2023/06/19 16:59:36 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_250.pth is removed
2023/06/19 16:59:38 - mmengine - INFO - The best checkpoint with 67.5500 mIoU at 260 iter is saved to best_mIoU_iter_260.pth.
2023/06/19 16:59:53 - mmengine - INFO - Saving checkpoint at 270 iterations
2023/06/19 16:59:57 - mmengine - INFO - per class results:
2023/06/19 16:59:57 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 94.28 | 96.42 |
|    red     | 90.14 | 99.07 |
|   green    | 80.76 | 82.56 |
|   white    | 81.63 | 87.96 |
| seed-black | 63.79 | 71.14 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 16:59:57 - mmengine - INFO - Iter(val) [11/11]    aAcc: 95.2800  mIoU: 68.4300  mAcc: 72.8600  data_time: 0.0067  time: 0.0954
2023/06/19 16:59:57 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_260.pth is removed
2023/06/19 16:59:58 - mmengine - INFO - The best checkpoint with 68.4300 mIoU at 270 iter is saved to best_mIoU_iter_270.pth.
2023/06/19 17:00:13 - mmengine - INFO - Iter(train) [280/400]  lr: 3.4576e-03  eta: 0:03:14  time: 1.6332  data_time: 0.4305  memory: 19995  loss: 0.2433  decode.loss_ce: 0.1578  decode.acc_seg: 91.8637  aux.loss_ce: 0.0855  aux.acc_seg: 92.5057
2023/06/19 17:00:13 - mmengine - INFO - Saving checkpoint at 280 iterations
2023/06/19 17:00:18 - mmengine - INFO - per class results:
2023/06/19 17:00:18 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 77.85 | 78.74 |
|    red     | 93.82 | 98.56 |
|   green    | 34.99 | 94.35 |
|   white    | 84.01 | 90.56 |
| seed-black | 67.37 |  78.8 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:00:18 - mmengine - INFO - Iter(val) [11/11]    aAcc: 85.7400  mIoU: 59.6800  mAcc: 73.5000  data_time: 0.0068  time: 0.0978
2023/06/19 17:00:31 - mmengine - INFO - Saving checkpoint at 290 iterations
2023/06/19 17:00:34 - mmengine - INFO - per class results:
2023/06/19 17:00:34 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 94.91 | 95.79 |
|    red     | 93.37 | 98.62 |
|   green    | 79.55 | 95.39 |
|   white    | 83.45 | 90.49 |
| seed-black | 64.86 | 79.72 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:00:34 - mmengine - INFO - Iter(val) [11/11]    aAcc: 95.8900  mIoU: 69.3600  mAcc: 76.6700  data_time: 0.0076  time: 0.0966
2023/06/19 17:00:34 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_270.pth is removed
2023/06/19 17:00:36 - mmengine - INFO - The best checkpoint with 69.3600 mIoU at 290 iter is saved to best_mIoU_iter_290.pth.
2023/06/19 17:00:51 - mmengine - INFO - Iter(train) [300/400]  lr: 2.9494e-03  eta: 0:02:41  time: 1.7167  data_time: 0.5158  memory: 19996  loss: 0.2538  decode.loss_ce: 0.1619  decode.acc_seg: 95.2099  aux.loss_ce: 0.0919  aux.acc_seg: 93.7885
2023/06/19 17:00:51 - mmengine - INFO - Saving checkpoint at 300 iterations
2023/06/19 17:00:55 - mmengine - INFO - per class results:
2023/06/19 17:00:55 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background |  94.9 | 96.58 |
|    red     | 91.99 | 99.16 |
|   green    | 80.63 | 87.76 |
|   white    |  78.5 | 84.99 |
| seed-black | 63.25 | 77.75 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:00:55 - mmengine - INFO - Iter(val) [11/11]    aAcc: 95.5800  mIoU: 68.2100  mAcc: 74.3700  data_time: 0.0090  time: 0.0985
2023/06/19 17:01:08 - mmengine - INFO - Saving checkpoint at 310 iterations
2023/06/19 17:01:11 - mmengine - INFO - per class results:
2023/06/19 17:01:11 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 92.31 |  93.3 |
|    red     |  93.6 | 98.96 |
|   green    |  66.3 | 94.86 |
|   white    | 84.37 | 89.92 |
| seed-black | 63.42 | 70.84 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:01:11 - mmengine - INFO - Iter(val) [11/11]    aAcc: 94.3800  mIoU: 66.6700  mAcc: 74.6500  data_time: 0.0081  time: 0.0973
2023/06/19 17:01:23 - mmengine - INFO - Iter(train) [320/400]  lr: 2.4310e-03  eta: 0:02:07  time: 1.2453  data_time: 0.0495  memory: 19995  loss: 0.2785  decode.loss_ce: 0.1809  decode.acc_seg: 96.5605  aux.loss_ce: 0.0976  aux.acc_seg: 95.4517
2023/06/19 17:01:23 - mmengine - INFO - Saving checkpoint at 320 iterations
2023/06/19 17:01:27 - mmengine - INFO - per class results:
2023/06/19 17:01:27 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 94.06 | 95.02 |
|    red     | 92.89 |  98.8 |
|   green    | 75.33 | 94.46 |
|   white    | 83.29 |  89.3 |
| seed-black | 62.96 | 79.01 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:01:27 - mmengine - INFO - Iter(val) [11/11]    aAcc: 95.3300  mIoU: 68.0900  mAcc: 76.1000  data_time: 0.0073  time: 0.0967
2023/06/19 17:01:39 - mmengine - INFO - Saving checkpoint at 330 iterations
2023/06/19 17:01:43 - mmengine - INFO - per class results:
2023/06/19 17:01:43 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 92.79 | 93.62 |
|    red     | 88.44 | 98.58 |
|   green    | 84.82 | 94.68 |
|   white    | 81.78 | 91.52 |
| seed-black |  60.1 | 80.66 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:01:43 - mmengine - INFO - Iter(val) [11/11]    aAcc: 94.6200  mIoU: 67.9900  mAcc: 76.5100  data_time: 0.0082  time: 0.0981
2023/06/19 17:01:56 - mmengine - INFO - Iter(train) [340/400]  lr: 1.8993e-03  eta: 0:01:34  time: 1.2358  data_time: 0.0351  memory: 19994  loss: 0.2762  decode.loss_ce: 0.1762  decode.acc_seg: 92.6679  aux.loss_ce: 0.0999  aux.acc_seg: 89.8861
2023/06/19 17:01:56 - mmengine - INFO - Saving checkpoint at 340 iterations
2023/06/19 17:01:59 - mmengine - INFO - per class results:
2023/06/19 17:01:59 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 90.84 |  91.6 |
|    red     | 83.72 |  98.9 |
|   green    | 86.71 |  94.8 |
|   white    | 81.96 | 88.55 |
| seed-black | 57.48 | 76.67 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:01:59 - mmengine - INFO - Iter(val) [11/11]    aAcc: 93.3000  mIoU: 66.7900  mAcc: 75.0900  data_time: 0.0080  time: 0.0977
2023/06/19 17:02:11 - mmengine - INFO - Saving checkpoint at 350 iterations
2023/06/19 17:02:14 - mmengine - INFO - per class results:
2023/06/19 17:02:14 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 94.51 |  95.3 |
|    red     | 92.07 | 98.84 |
|   green    | 80.59 |  96.2 |
|   white    | 83.62 | 89.32 |
| seed-black | 59.98 | 75.36 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:02:14 - mmengine - INFO - Iter(val) [11/11]    aAcc: 95.6100  mIoU: 68.4600  mAcc: 75.8400  data_time: 0.0080  time: 0.0985
2023/06/19 17:02:27 - mmengine - INFO - Iter(train) [360/400]  lr: 1.3491e-03  eta: 0:01:02  time: 1.2559  data_time: 0.0496  memory: 19996  loss: 0.2381  decode.loss_ce: 0.1472  decode.acc_seg: 93.0700  aux.loss_ce: 0.0909  aux.acc_seg: 90.9203
2023/06/19 17:02:27 - mmengine - INFO - Saving checkpoint at 360 iterations
2023/06/19 17:02:31 - mmengine - INFO - per class results:
2023/06/19 17:02:31 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 96.14 | 97.01 |
|    red     | 93.33 | 99.02 |
|   green    |  87.4 | 95.67 |
|   white    | 83.45 | 88.89 |
| seed-black | 62.23 | 77.19 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:02:31 - mmengine - INFO - Iter(val) [11/11]    aAcc: 96.6100  mIoU: 70.4200  mAcc: 76.3000  data_time: 0.0078  time: 0.0977
2023/06/19 17:02:31 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_290.pth is removed
2023/06/19 17:02:33 - mmengine - INFO - The best checkpoint with 70.4200 mIoU at 360 iter is saved to best_mIoU_iter_360.pth.
2023/06/19 17:02:48 - mmengine - INFO - Saving checkpoint at 370 iterations
2023/06/19 17:02:51 - mmengine - INFO - per class results:
2023/06/19 17:02:51 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 96.08 | 97.01 |
|    red     |  92.9 | 98.97 |
|   green    | 88.67 | 94.87 |
|   white    | 83.41 | 89.45 |
| seed-black |  63.1 | 78.15 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:02:51 - mmengine - INFO - Iter(val) [11/11]    aAcc: 96.5800  mIoU: 70.6900  mAcc: 76.4100  data_time: 0.0082  time: 0.0982
2023/06/19 17:02:52 - mmengine - INFO - The previous best checkpoint /gemini/code/MMSegmentation Tutorial/exps/best_mIoU_iter_360.pth is removed
2023/06/19 17:02:54 - mmengine - INFO - The best checkpoint with 70.6900 mIoU at 370 iter is saved to best_mIoU_iter_370.pth.
2023/06/19 17:03:08 - mmengine - INFO - Iter(train) [380/400]  lr: 7.6940e-04  eta: 0:00:31  time: 1.6758  data_time: 0.4793  memory: 19996  loss: 0.2020  decode.loss_ce: 0.1280  decode.acc_seg: 94.0872  aux.loss_ce: 0.0741  aux.acc_seg: 93.8977
2023/06/19 17:03:09 - mmengine - INFO - Saving checkpoint at 380 iterations
2023/06/19 17:03:12 - mmengine - INFO - per class results:
2023/06/19 17:03:12 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 95.63 | 96.53 |
|    red     | 92.43 | 98.74 |
|   green    | 87.86 | 95.18 |
|   white    | 84.19 | 91.19 |
| seed-black | 63.51 |  77.1 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:03:12 - mmengine - INFO - Iter(val) [11/11]    aAcc: 96.3700  mIoU: 70.6000  mAcc: 76.4600  data_time: 0.0086  time: 0.0986
2023/06/19 17:03:25 - mmengine - INFO - Saving checkpoint at 390 iterations
2023/06/19 17:03:28 - mmengine - INFO - per class results:
2023/06/19 17:03:28 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 95.36 |  96.3 |
|    red     |  91.6 | 98.63 |
|   green    | 88.93 | 95.15 |
|   white    | 83.91 | 91.17 |
| seed-black | 63.66 | 76.22 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:03:28 - mmengine - INFO - Iter(val) [11/11]    aAcc: 96.2000  mIoU: 70.5800  mAcc: 76.2400  data_time: 0.0094  time: 0.0987
2023/06/19 17:03:41 - mmengine - INFO - Iter(train) [400/400]  lr: 1.0000e-04  eta: 0:00:00  time: 1.3042  data_time: 0.0989  memory: 19995  loss: 0.2565  decode.loss_ce: 0.1637  decode.acc_seg: 93.2194  aux.loss_ce: 0.0927  aux.acc_seg: 90.5172
2023/06/19 17:03:41 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/06/19 17:03:45 - mmengine - INFO - per class results:
2023/06/19 17:03:45 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 94.44 |  95.3 |
|    red     | 90.51 | 98.69 |
|   green    | 86.91 | 95.28 |
|   white    |  83.8 | 91.18 |
| seed-black | 62.42 | 78.31 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/19 17:03:45 - mmengine - INFO - Iter(val) [11/11]    aAcc: 95.6500  mIoU: 69.6800  mAcc: 76.4600  data_time: 0.0079  time: 0.0967
